// Signature file for parser generated by fsyacc
module internal System.Linq.SourceCode.C.Ansi.Parser
type token = 
  | EOF
  | CASE
  | DEFAULT
  | IF
  | ELSE
  | SWITCH
  | WHILE
  | DO
  | FOR
  | GOTO
  | CONTINUE
  | BREAK
  | RETURN
  | STRUCT
  | UNION
  | ENUM
  | CHAR
  | SHORT
  | INT
  | LONG
  | SIGNED
  | UNSIGNED
  | FLOAT
  | DOUBLE
  | CONST
  | VOLATILE
  | VOID
  | SIZEOF
  | TYPEDEF
  | EXTERN
  | STATIC
  | AUTO
  | REGISTER
  | ASSIGN
  | LEFT_ASSIGN
  | RIGHT_ASSIGN
  | XOR_ASSIGN
  | OR_ASSIGN
  | AND_ASSIGN
  | MUL_ASSIGN
  | DIV_ASSIGN
  | MOD_ASSIGN
  | SUB_ASSIGN
  | ADD_ASSIGN
  | LOGICAL_AND_OP
  | LOGICAL_OR_OP
  | LOGICAL_NOT_OP
  | ELLIPSIS
  | DOT
  | COMMA
  | COLON
  | SEMICOLON
  | L_ROUND_BRACKET
  | R_ROUND_BRACKET
  | L_CURRLY_BRACKET
  | R_CURRLY_BRACKET
  | L_SQUARE_BRACKET
  | R_SQUARE_BRACKET
  | LEFT_OP
  | RIGHT_OP
  | LT_OP
  | GT_OP
  | LE_OP
  | GE_OP
  | EQ_OP
  | NE_OP
  | ADD_OP
  | SUB_OP
  | MUL_OP
  | DIV_OP
  | MOD_OP
  | AND_OP
  | OR_OP
  | NOT_OP
  | XOR_OP
  | TETRNARY_OP
  | INC_OP
  | DEC_OP
  | PTR_OP
  | STRING_LITERAL of (string)
  | CONSTANT of (string)
  | IDENTIFIER of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_SWITCH
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_FOR
    | TOKEN_GOTO
    | TOKEN_CONTINUE
    | TOKEN_BREAK
    | TOKEN_RETURN
    | TOKEN_STRUCT
    | TOKEN_UNION
    | TOKEN_ENUM
    | TOKEN_CHAR
    | TOKEN_SHORT
    | TOKEN_INT
    | TOKEN_LONG
    | TOKEN_SIGNED
    | TOKEN_UNSIGNED
    | TOKEN_FLOAT
    | TOKEN_DOUBLE
    | TOKEN_CONST
    | TOKEN_VOLATILE
    | TOKEN_VOID
    | TOKEN_SIZEOF
    | TOKEN_TYPEDEF
    | TOKEN_EXTERN
    | TOKEN_STATIC
    | TOKEN_AUTO
    | TOKEN_REGISTER
    | TOKEN_ASSIGN
    | TOKEN_LEFT_ASSIGN
    | TOKEN_RIGHT_ASSIGN
    | TOKEN_XOR_ASSIGN
    | TOKEN_OR_ASSIGN
    | TOKEN_AND_ASSIGN
    | TOKEN_MUL_ASSIGN
    | TOKEN_DIV_ASSIGN
    | TOKEN_MOD_ASSIGN
    | TOKEN_SUB_ASSIGN
    | TOKEN_ADD_ASSIGN
    | TOKEN_LOGICAL_AND_OP
    | TOKEN_LOGICAL_OR_OP
    | TOKEN_LOGICAL_NOT_OP
    | TOKEN_ELLIPSIS
    | TOKEN_DOT
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_L_ROUND_BRACKET
    | TOKEN_R_ROUND_BRACKET
    | TOKEN_L_CURRLY_BRACKET
    | TOKEN_R_CURRLY_BRACKET
    | TOKEN_L_SQUARE_BRACKET
    | TOKEN_R_SQUARE_BRACKET
    | TOKEN_LEFT_OP
    | TOKEN_RIGHT_OP
    | TOKEN_LT_OP
    | TOKEN_GT_OP
    | TOKEN_LE_OP
    | TOKEN_GE_OP
    | TOKEN_EQ_OP
    | TOKEN_NE_OP
    | TOKEN_ADD_OP
    | TOKEN_SUB_OP
    | TOKEN_MUL_OP
    | TOKEN_DIV_OP
    | TOKEN_MOD_OP
    | TOKEN_AND_OP
    | TOKEN_OR_OP
    | TOKEN_NOT_OP
    | TOKEN_XOR_OP
    | TOKEN_TETRNARY_OP
    | TOKEN_INC_OP
    | TOKEN_DEC_OP
    | TOKEN_PTR_OP
    | TOKEN_STRING_LITERAL
    | TOKEN_CONSTANT
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startdeclaration
    | NONTERM__startStatement
    | NONTERM__startexpression
    | NONTERM__starttranslation_unit
    | NONTERM_expression
    | NONTERM_assignment_expression
    | NONTERM_assignment_operator
    | NONTERM_conditional_expression
    | NONTERM_logical_or_expression
    | NONTERM_logical_and_expression
    | NONTERM_inclusive_or_expression
    | NONTERM_exclusive_or_expression
    | NONTERM_and_expression
    | NONTERM_equality_expression
    | NONTERM_relational_expression
    | NONTERM_shift_expression
    | NONTERM_additive_expression
    | NONTERM_multiplicative_expression
    | NONTERM_cast_expression
    | NONTERM_unary_expression
    | NONTERM_unary_operator
    | NONTERM_argument_expression_list
    | NONTERM_postfix_expression
    | NONTERM_primary_expression
    | NONTERM_constant_expression
    | NONTERM_storage_class_Specifier
    | NONTERM_type_Specifier
    | NONTERM_enum_Specifier
    | NONTERM_enumerator_list
    | NONTERM_enumerator
    | NONTERM_struct_or_union_Specifier
    | NONTERM_struct_declaration_list
    | NONTERM_struct_declaration
    | NONTERM_struct_declarator_list
    | NONTERM_struct_declarator
    | NONTERM_type_qualifier
    | NONTERM_struct_or_union
    | NONTERM_declaration
    | NONTERM_declaration_list
    | NONTERM_declaration_Specifiers
    | NONTERM_Specifier_qualifier_list
    | NONTERM_init_declarator_list
    | NONTERM_init_declarator
    | NONTERM_declarator
    | NONTERM_direct_declarator
    | NONTERM_pointer
    | NONTERM_type_qualifier_list
    | NONTERM_Parameter_type_list
    | NONTERM_Parameter_list
    | NONTERM_Parameter_declaration
    | NONTERM_identifier_list
    | NONTERM_type_name
    | NONTERM_abstract_declarator
    | NONTERM_direct_abstract_declarator
    | NONTERM_initializer
    | NONTERM_initializer_list
    | NONTERM_Statement
    | NONTERM_labeled_Statement
    | NONTERM_compound_Statement
    | NONTERM_Statement_list
    | NONTERM_expression_Statement
    | NONTERM_selection_Statement
    | NONTERM_iteration_Statement
    | NONTERM_jump_Statement
    | NONTERM_translation_unit
    | NONTERM_external_declaration
    | NONTERM_function_definition
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val declaration : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (DeclarationBase) 
val Statement : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (StatementBase) 
val expression : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (ExpressionBase) 
val translation_unit : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (TranslationUnit) 
