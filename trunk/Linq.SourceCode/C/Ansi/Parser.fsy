%{
open System.Collections.Generic

type program = System.Collections.Generic.IList<DeclarationBase>

let internal CreateListWithElement (element : 'T) = 
    let list = new System.Collections.Generic.List<'T>()
    list.Add(element)
    (list :> System.Collections.Generic.IList<'T>)
    
let internal CreateListWithElements (elements : 'T seq) = 
    let list = new System.Collections.Generic.List<'T>()
    for element in elements do
        list.Add(element)
    (list :> System.Collections.Generic.IList<'T>)

let internal AddElement (list : #System.Collections.Generic.IList<'T>, element : 'T) =
   list.Add(element)
   list
    
%}

//Tokens containing some data
%token <string> IDENTIFIER 
%token <string> CONSTANT 
%token <string> STRING_LITERAL

//Pointer operator: "->"
%token PTR_OP

//Incrementation and decrementation operators: "++", "--"
%token INC_OP DEC_OP

//Ternary operator: '?'
%token TETRNARY_OP

//Standard operators: '+', '-', '*', '/', '%', '&', '|', '~',  '^'
%token ADD_OP SUB_OP MUL_OP DIV_OP MOD_OP AND_OP OR_OP NOT_OP XOR_OP 

//Comparison operators: '<', '>', "<=", ">=", "==", "!="
%token LT_OP GT_OP LE_OP GE_OP EQ_OP NE_OP

//Shift operators: "<<", ">>"
%token LEFT_OP RIGHT_OP

//Brackets: '(', ')', '{', '}', '[', ']'
%token L_ROUND_BRACKET R_ROUND_BRACKET L_CURRLY_BRACKET R_CURRLY_BRACKET L_SQUARE_BRACKET R_SQUARE_BRACKET

//Punctuation marks: "...", '.', ',' , ':', ';' 
%token ELLIPSIS DOT COMMA COLON SEMICOLON      

//Logical operators: "&&", "||", '!'
%token LOGICAL_AND_OP LOGICAL_OR_OP LOGICAL_NOT_OP

//Assignments '=', "<<=", ">>=", "~=", "|=", ", "&=", "*=", "/=", "%=", "-=", "+="
%token ASSIGN LEFT_ASSIGN RIGHT_ASSIGN XOR_ASSIGN OR_ASSIGN AND_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN SUB_ASSIGN ADD_ASSIGN

//Keywords
%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token SIZEOF
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM 
%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%token EOF

%start translation_unit
%type <TranslationUnit> translation_unit

%start expression
%type <ExpressionBase> expression

%start Statement
%type <StatementBase> Statement

%start declaration
%type <DeclarationBase> declaration

%%

    
expression
    : assignment_expression                             { $1 }
    | expression COMMA assignment_expression            { 
            match ($1 : ExpressionBase) with
            | :? ExpressionList -> 
                ($1 :?> ExpressionList).Add($3)
                $1 
            | _ -> 
                let result = ExpressionList()
                result.Add($1)
                result.Add($3)
                result :> ExpressionBase
        }
    
assignment_expression
    : conditional_expression                                { $1 }
    | unary_expression assignment_operator assignment_expression  { BinaryExpression($1, $2, $3) :> ExpressionBase }
    

assignment_operator
    : ASSIGN                { BinaryOperator.Assign }
    | MUL_ASSIGN            { BinaryOperator.AssignMultiply }
    | DIV_ASSIGN            { BinaryOperator.AssignDivide }
    | MOD_ASSIGN            { BinaryOperator.AssignModulo }
    | ADD_ASSIGN            { BinaryOperator.AssignAdd }
    | SUB_ASSIGN            { BinaryOperator.AssignSubtract }
    | LEFT_ASSIGN           { BinaryOperator.AssignShiftLeft }
    | RIGHT_ASSIGN          { BinaryOperator.AssignShiftRight }
    | AND_ASSIGN            { BinaryOperator.AssignAnd }
    | XOR_ASSIGN            { BinaryOperator.AssignXor }
    | OR_ASSIGN             { BinaryOperator.AssignOr }
    
conditional_expression
    : logical_or_expression                                 { $1 }
    | logical_or_expression TETRNARY_OP expression COLON conditional_expression { TetrnaryExpression($1, $3, $5) :> ExpressionBase }
    
logical_or_expression
    : logical_and_expression                                { $1 }
    | logical_or_expression LOGICAL_OR_OP logical_and_expression { BinaryExpression($1, BinaryOperator.LogicalOr, $3) :> ExpressionBase }

logical_and_expression
    : inclusive_or_expression                               { $1 }
    | logical_and_expression LOGICAL_AND_OP inclusive_or_expression { BinaryExpression($1, BinaryOperator.LogicalAnd, $3) :> ExpressionBase }

inclusive_or_expression
    : exclusive_or_expression                               { $1 }
    | inclusive_or_expression OR_OP exclusive_or_expression { BinaryExpression($1, BinaryOperator.Or, $3) :> ExpressionBase }

exclusive_or_expression
    : and_expression                                        { $1 }
    | exclusive_or_expression XOR_OP and_expression         { BinaryExpression($1, BinaryOperator.Xor, $3) :> ExpressionBase }

and_expression
    : equality_expression                                   { $1 }
    | and_expression AND_OP equality_expression             { BinaryExpression($1, BinaryOperator.And, $3) :> ExpressionBase }

equality_expression
    : relational_expression                                 { $1 }
    | equality_expression EQ_OP relational_expression       { BinaryExpression($1, BinaryOperator.Equal, $3) :> ExpressionBase }
    | equality_expression NE_OP relational_expression       { BinaryExpression($1, BinaryOperator.NotEqual, $3) :> ExpressionBase }

relational_expression
    : shift_expression                                      { $1 }
    | relational_expression LT_OP shift_expression          { BinaryExpression($1, BinaryOperator.LessThan, $3) :> ExpressionBase }
    | relational_expression GT_OP shift_expression          { BinaryExpression($1, BinaryOperator.GreaterThan, $3) :> ExpressionBase }
    | relational_expression LE_OP shift_expression          { BinaryExpression($1, BinaryOperator.LessOrEqual, $3) :> ExpressionBase }
    | relational_expression GE_OP shift_expression          { BinaryExpression($1, BinaryOperator.GreaterOrEqual, $3) :> ExpressionBase }

shift_expression
    : additive_expression                                   { $1 }
    | shift_expression LEFT_OP additive_expression          { BinaryExpression($1, BinaryOperator.ShiftLeft, $3) :> ExpressionBase }
    | shift_expression RIGHT_OP additive_expression         { BinaryExpression($1, BinaryOperator.ShiftRight, $3) :> ExpressionBase }

additive_expression
    : multiplicative_expression                             { $1 }
    | additive_expression ADD_OP multiplicative_expression  { BinaryExpression($1, BinaryOperator.Add, $3) :> ExpressionBase }
    | additive_expression SUB_OP multiplicative_expression  { BinaryExpression($1, BinaryOperator.Subtract, $3) :> ExpressionBase }

multiplicative_expression
    : cast_expression                                       { $1 }
    | multiplicative_expression MUL_OP cast_expression      { BinaryExpression($1, BinaryOperator.Multiply, $3) :> ExpressionBase }
    | multiplicative_expression DIV_OP cast_expression      { BinaryExpression($1, BinaryOperator.Divide, $3) :> ExpressionBase }
    | multiplicative_expression MOD_OP cast_expression      { BinaryExpression($1, BinaryOperator.Modulo, $3) :> ExpressionBase }

cast_expression
    : unary_expression                                      { $1 }
    | L_ROUND_BRACKET type_name R_ROUND_BRACKET cast_expression { CastExpression($2, $4) :> ExpressionBase }

unary_expression
    : postfix_expression                                { $1 }
    | INC_OP unary_expression                           { UnaryExpression($2, UnaryOperator.PrefixIncrement) :> ExpressionBase }
    | DEC_OP unary_expression                           { UnaryExpression($2, UnaryOperator.PrefixDecrement) :> ExpressionBase }
    | unary_operator cast_expression                    { UnaryExpression($2, $1) :> ExpressionBase }
    | SIZEOF unary_expression                           { UnaryExpression($2, UnaryOperator.Sizeof) :> ExpressionBase }
    | SIZEOF L_ROUND_BRACKET type_name R_ROUND_BRACKET  { SizeofExpression($3) :> ExpressionBase }

unary_operator
    : AND_OP            { UnaryOperator.AddressOf }
    | MUL_OP            { UnaryOperator.Indirection }
    | ADD_OP            { UnaryOperator.Plus }
    | SUB_OP            { UnaryOperator.Minus }
    | NOT_OP            { UnaryOperator.Not }
    | LOGICAL_NOT_OP    { UnaryOperator.LogicalNot }

argument_expression_list
    : assignment_expression                                 { CreateListWithElement($1) }
    | argument_expression_list COMMA assignment_expression  { AddElement($1, $3) }

postfix_expression
    : primary_expression                                                            { $1 }
    | postfix_expression L_SQUARE_BRACKET expression R_SQUARE_BRACKET               { ArrayExpression($1, $3) :> ExpressionBase }
    | postfix_expression L_ROUND_BRACKET R_ROUND_BRACKET                            { FunctionCallExpression($1, null) :> ExpressionBase }
    | postfix_expression L_ROUND_BRACKET argument_expression_list R_ROUND_BRACKET   { FunctionCallExpression($1, $3) :> ExpressionBase }
    | postfix_expression DOT IDENTIFIER                                             { MemberDotExpression($1, IdentifierExpression($3)) :> ExpressionBase }
    | postfix_expression PTR_OP IDENTIFIER                                          { MemberPtrExpression($1, IdentifierExpression($3)) :> ExpressionBase }
    | postfix_expression INC_OP                                                     { UnaryExpression($1, UnaryOperator.PostfixIncrement) :> ExpressionBase }
    | postfix_expression DEC_OP                                                     { UnaryExpression($1, UnaryOperator.PostfixDecrement) :> ExpressionBase }

primary_expression
    : IDENTIFIER                                 { IdentifierExpression($1) :> ExpressionBase }
    | CONSTANT                                   { ConstantExpression($1) :> ExpressionBase }
    | STRING_LITERAL                             { 
        let wide = ($1.[0] = 'L')
        let mutable text = $1
        text <- text.Substring(0, text.Length - 1);
        text <- text.Substring(if wide then 2 else 1)
        StringLiteralExpression(text, wide) :> ExpressionBase 
    }
    | L_ROUND_BRACKET expression R_ROUND_BRACKET { $2 }

constant_expression
    : conditional_expression                            { $1 }  
    
storage_class_Specifier
    : TYPEDEF                   { StorageClassSpecifier(StorageClass.Typedef) :> SpecifierBase }
    | EXTERN                    { StorageClassSpecifier(StorageClass.Extern) :> SpecifierBase }
    | STATIC                    { StorageClassSpecifier(StorageClass.Static) :> SpecifierBase }
    | AUTO                      { StorageClassSpecifier(StorageClass.Auto) :> SpecifierBase }
    | REGISTER                  { StorageClassSpecifier(StorageClass.Register) :> SpecifierBase }

type_Specifier
    : VOID                          { StandardTypeSpecifier(TypeSpecifier.Void) :> SpecifierBase }
    | CHAR                          { StandardTypeSpecifier(TypeSpecifier.Char) :> SpecifierBase }
    | SHORT                         { StandardTypeSpecifier(TypeSpecifier.Short) :> SpecifierBase }
    | INT                           { StandardTypeSpecifier(TypeSpecifier.Int) :> SpecifierBase }
    | LONG                          { StandardTypeSpecifier(TypeSpecifier.Long) :> SpecifierBase }
    | FLOAT                         { StandardTypeSpecifier(TypeSpecifier.Float) :> SpecifierBase }
    | DOUBLE                        { StandardTypeSpecifier(TypeSpecifier.Double) :> SpecifierBase }
    | SIGNED                        { StandardTypeSpecifier(TypeSpecifier.Signed) :> SpecifierBase }
    | UNSIGNED                      { StandardTypeSpecifier(TypeSpecifier.Unsigned) :> SpecifierBase }
    | struct_or_union_Specifier     { $1 }
    | enum_Specifier                { $1 }
    
enum_Specifier
    : ENUM L_CURRLY_BRACKET enumerator_list R_CURRLY_BRACKET            { EnumSpecifier(null, $3) :> SpecifierBase }
    | ENUM IDENTIFIER L_CURRLY_BRACKET enumerator_list R_CURRLY_BRACKET { EnumSpecifier($2, $4) :> SpecifierBase }
    | ENUM IDENTIFIER                                                   { EnumSpecifier($2, null) :> SpecifierBase }   
    
enumerator_list
    : enumerator                            { 
            ($1 : Enumerator )
            let list = new System.Collections.Generic.List<EnumeratorBase>()
            list.Add($1)
            list
        }
    | enumerator_list COMMA enumerator      { 
            $1.Add($3) 
            $1
        }
    
enumerator
    : IDENTIFIER                            { Enumerator($1, null) }
    | IDENTIFIER ASSIGN constant_expression { Enumerator($1, $3) }
    

struct_or_union_Specifier
    : struct_or_union IDENTIFIER L_CURRLY_BRACKET struct_declaration_list R_CURRLY_BRACKET  { StructureSpecifier($1, $2, $4) :> SpecifierBase } 
    | struct_or_union L_CURRLY_BRACKET struct_declaration_list R_CURRLY_BRACKET             { StructureSpecifier($1, null, $3) :> SpecifierBase } 
    | struct_or_union IDENTIFIER                                                            { StructureSpecifier($1, $2, null) :> SpecifierBase } 

    
struct_declaration_list
    : struct_declaration                                                                    { CreateListWithElement($1) }             
    | struct_declaration_list struct_declaration                                            { AddElement($1, $2) }

    
struct_declaration
    : Specifier_qualifier_list struct_declarator_list SEMICOLON                             { VariableDeclaration($1, $2) :> DeclarationBase }
   

struct_declarator_list
    : struct_declarator                                                                     { 
            let list = new System.Collections.Generic.List<DeclaratorBase>()
            list.Add($1)
            list
        }
    | struct_declarator_list COMMA struct_declarator                                        { AddElement($1, $3) }

struct_declarator
    : declarator                                                    { StructureDeclarator($1, null) :> DeclaratorBase }
    | COLON constant_expression                                     { StructureDeclarator(null, $2) :> DeclaratorBase }
    | declarator COLON constant_expression                          { StructureDeclarator($1, $3) :> DeclaratorBase }


type_qualifier
    : CONST                                 { TypeQualificationSpecifier(TypeQualifier.Const) :> SpecifierBase }
    | VOLATILE                              { TypeQualificationSpecifier(TypeQualifier.Volatile) :> SpecifierBase }
   

struct_or_union
    : STRUCT                        { StructureType.Struct }
    | UNION                         { StructureType.Union }


declaration
    : declaration_Specifiers SEMICOLON                      { VariableDeclaration($1, null) :> DeclarationBase }
    | declaration_Specifiers init_declarator_list SEMICOLON { VariableDeclaration($1, $2) :> DeclarationBase }


declaration_list
    : declaration                      { 
            let list = new System.Collections.Generic.List<DeclarationBase>()
            list.Add($1)
            list
        }
    | declaration_list declaration     { 
            $1.Add($2) 
            $1
        }
    
    
declaration_Specifiers
    : storage_class_Specifier                           { $1 }         
    | storage_class_Specifier declaration_Specifiers    {
            match ($2 : SpecifierBase) with
            | :? SpecifierList -> 
                ($2 :?> SpecifierList).Insert(0, $1)
                $2 
            | _ -> 
                let result = new SpecifierList()
                result.Add($1)
                result.Add($2)
                result :> SpecifierBase
        }
    | type_Specifier                                    { $1 }
    | type_Specifier declaration_Specifiers             {
            match ($2 : SpecifierBase) with
            | :? SpecifierList -> 
                ($2 :?> SpecifierList).Insert(0, $1)
                $2 
            | _ -> 
                let result = new SpecifierList()
                result.Add($1)
                result.Add($2)
                result :> SpecifierBase
        }
    | type_qualifier                                    { $1 }
    | type_qualifier declaration_Specifiers             {
            match ($2 : SpecifierBase) with
            | :? SpecifierList -> 
                ($2 :?> SpecifierList).Insert(0, $1)
                $2 
            | _ -> 
                let result = new SpecifierList()
                result.Add($1)
                result.Add($2)
                result :> SpecifierBase
        }


Specifier_qualifier_list
    : type_Specifier Specifier_qualifier_list             {
            match ($2 : SpecifierBase) with
            | :? SpecifierList -> 
                ($2 :?> SpecifierList).Insert(0, $1)
                $2 
            | _ -> 
                let result = new SpecifierList()
                result.Add($1)
                result.Add($2)
                result :> SpecifierBase
        }
    | type_Specifier                                    { $1 }
    | type_qualifier Specifier_qualifier_list             {
            match ($2 : SpecifierBase) with
            | :? SpecifierList -> 
                ($2 :?> SpecifierList).Insert(0, $1)
                $2 
            | _ -> 
                let resutl = new SpecifierList()
                resutl.Add($1)
                resutl.Add($2)
                resutl :> SpecifierBase
        }
    | type_qualifier                                    { $1 }


init_declarator_list
    : init_declarator                                    { 
            let list = new System.Collections.Generic.List<DeclaratorBase>()
            list.Add($1)
            list
        }
    | init_declarator_list COMMA init_declarator         {
            $1.Add($3) 
            $1
        }
    
    
init_declarator
    : declarator                                        { InitDeclarator($1, null) :> DeclaratorBase }
    | declarator ASSIGN initializer                     { InitDeclarator($1, $3) :> DeclaratorBase }
    

declarator
    : pointer direct_declarator             { PointerDeclarator($1, $2) :> DeclaratorBase }
    | direct_declarator                     { $1 }
    ;


direct_declarator
    : IDENTIFIER                                                                { NameDeclarator($1) :> DeclaratorBase }
    | L_ROUND_BRACKET declarator R_ROUND_BRACKET                                { $2 }
    | direct_declarator L_SQUARE_BRACKET constant_expression R_SQUARE_BRACKET   { ArrayDeclarator($1, $3) :> DeclaratorBase }
    | direct_declarator L_SQUARE_BRACKET R_SQUARE_BRACKET                       { ArrayDeclarator($1, null) :> DeclaratorBase }
    | direct_declarator L_ROUND_BRACKET Parameter_type_list R_ROUND_BRACKET     { 
            let (parameters, isVararg) = $3
            FunctionDeclarator($1, parameters, isVararg) :> DeclaratorBase 
        }
    | direct_declarator L_ROUND_BRACKET identifier_list R_ROUND_BRACKET         { IdentifierListDeclarator($1, $3) :> DeclaratorBase }
    | direct_declarator L_ROUND_BRACKET R_ROUND_BRACKET                         { FunctionDeclarator($1, null, false) :> DeclaratorBase }
    ;

pointer
    : MUL_OP                                { Pointer(null, null) }
    | MUL_OP type_qualifier_list            { Pointer($2, null) }
    | MUL_OP pointer                        { Pointer(null, $2) }
    | MUL_OP type_qualifier_list pointer    { Pointer($2, $3) }


type_qualifier_list
    : type_qualifier                        { 
            let list = new System.Collections.Generic.List<SpecifierBase>()
            list.Add($1)
            list
        }
    | type_qualifier_list type_qualifier    {
            $1.Add($2) 
            $1
        }
      
Parameter_type_list
    : Parameter_list                        { ($1, false) } //false indicates that it is not a vararg definition
    | Parameter_list COMMA ELLIPSIS         { ($1, true) }
    ;

Parameter_list
    : Parameter_declaration                 {
            let list = new System.Collections.Generic.List<ParameterBase>()
            list.Add($1)
            (list :> System.Collections.Generic.IList<ParameterBase>)
        }
    | Parameter_list COMMA Parameter_declaration {
            $1.Add($3) 
            $1
        }  
      
 Parameter_declaration
    : declaration_Specifiers declarator             { Parameter($1, $2) }
    | declaration_Specifiers abstract_declarator    { Parameter($1, $2) }
    | declaration_Specifiers                        { Parameter($1) }
    
         
identifier_list
    : IDENTIFIER                            {
            let list = new System.Collections.Generic.List<string>()
            list.Add($1)
            list
        }
    | identifier_list COMMA IDENTIFIER      {
            $1.Add($3) 
            $1
        }
    
   
type_name
    : Specifier_qualifier_list                      { TypeName($1) }
    | Specifier_qualifier_list abstract_declarator  { TypeName($1, $2) }

    
abstract_declarator
    : pointer                                       { PointerAbstractDeclarator($1) :> DeclaratorBase }
    | direct_abstract_declarator                    { $1 }
    | pointer direct_abstract_declarator            { PointerAbstractDeclarator($1, $2) :> DeclaratorBase }
    

direct_abstract_declarator
    : L_ROUND_BRACKET abstract_declarator R_ROUND_BRACKET                   { $2 }
    | L_SQUARE_BRACKET R_SQUARE_BRACKET                                     { ArrayAbstractDeclarator(null, null) :> DeclaratorBase }
    | L_SQUARE_BRACKET constant_expression R_SQUARE_BRACKET                 { ArrayAbstractDeclarator(null, $2) :> DeclaratorBase }
    | direct_abstract_declarator L_SQUARE_BRACKET R_SQUARE_BRACKET          { ArrayAbstractDeclarator($1, null) :> DeclaratorBase }
    | direct_abstract_declarator L_SQUARE_BRACKET constant_expression R_SQUARE_BRACKET { ArrayAbstractDeclarator($1, $3) :> DeclaratorBase }
    | L_ROUND_BRACKET R_ROUND_BRACKET                                       { FunctionAbstractDeclarator(null, null, false) :> DeclaratorBase }
    | L_ROUND_BRACKET Parameter_type_list R_ROUND_BRACKET                   { 
            let (parameters, isVararg) = $2
            FunctionAbstractDeclarator(null, parameters, isVararg) :> DeclaratorBase 
        }
    | direct_abstract_declarator L_ROUND_BRACKET R_ROUND_BRACKET            { FunctionAbstractDeclarator($1, null, false) :> DeclaratorBase }
    | direct_abstract_declarator L_ROUND_BRACKET Parameter_type_list R_ROUND_BRACKET {
            let (parameters, isVararg) = $3
            FunctionAbstractDeclarator($1, parameters, isVararg) :> DeclaratorBase 
        }
    

       
initializer
    : assignment_expression                                    { SimpleInitializer($1) :> InitializerBase }
    | L_CURRLY_BRACKET initializer_list R_CURRLY_BRACKET       { ArrayInitializer($2, true) :> InitializerBase }
    //false indicates that there is one comma left at the end
    | L_CURRLY_BRACKET initializer_list COMMA R_CURRLY_BRACKET { ArrayInitializer($2, false) :> InitializerBase } 
    

initializer_list
    : initializer                           {
            let list = new System.Collections.Generic.List<InitializerBase>()
            list.Add($1)
            list
        }
    | initializer_list COMMA initializer     {
            $1.Add($3) 
            $1
        }
        
     
Statement
    : labeled_Statement                     { $1 }
    | compound_Statement                    { $1 }
    | expression_Statement                  { $1 }
    | selection_Statement                   { $1 }
    | iteration_Statement                   { $1 }
    | jump_Statement                        { $1 }
    ;

labeled_Statement
    : IDENTIFIER COLON Statement                { LabeledStatement($1, $3) :> StatementBase }
    | CASE constant_expression COLON Statement  { CaseLabeledStatement($2, $4) :> StatementBase }
    | DEFAULT COLON Statement                   { DefaultLabeledStatement($3) :> StatementBase }
    ;

compound_Statement
    : L_CURRLY_BRACKET R_CURRLY_BRACKET						{ CompoundStatement(null, null) :> StatementBase }
    | L_CURRLY_BRACKET Statement_list R_CURRLY_BRACKET      { CompoundStatement(null, $2) :> StatementBase }
    | L_CURRLY_BRACKET declaration_list R_CURRLY_BRACKET    { CompoundStatement($2, null) :> StatementBase }
    | L_CURRLY_BRACKET declaration_list Statement_list R_CURRLY_BRACKET { CompoundStatement($2, $3) :> StatementBase }
    ;

Statement_list
    : Statement                                 {
            let list = new System.Collections.Generic.List<StatementBase>()
            list.Add($1)
            list
        }
    | Statement_list Statement                  {
            $1.Add($2) 
            $1
        }
        
expression_Statement
    : SEMICOLON             { ExpressionStatement(null) :> StatementBase }
    | expression SEMICOLON  { ExpressionStatement($1) :> StatementBase }
   

selection_Statement
    : IF L_ROUND_BRACKET expression R_ROUND_BRACKET Statement   { IfStatement($3, $5, null) :> StatementBase }
    | IF L_ROUND_BRACKET expression R_ROUND_BRACKET Statement ELSE Statement    { IfStatement($3, $5, $7) :> StatementBase }
    | SWITCH L_ROUND_BRACKET expression R_ROUND_BRACKET Statement   { SwitchStatement($3, $5) :> StatementBase }
    

iteration_Statement
    : WHILE L_ROUND_BRACKET expression R_ROUND_BRACKET Statement                { WhileStatement($3, $5) :> StatementBase }
    | DO Statement WHILE L_ROUND_BRACKET expression R_ROUND_BRACKET SEMICOLON   { DoStatement($5, $2) :> StatementBase }
    | FOR L_ROUND_BRACKET expression_Statement expression_Statement R_ROUND_BRACKET Statement       { ForStatement($3, $4, null, $6) :> StatementBase }
    | FOR L_ROUND_BRACKET expression_Statement expression_Statement expression R_ROUND_BRACKET Statement    { ForStatement($3, $4, $5, $7) :> StatementBase }
    ;


jump_Statement
    : GOTO IDENTIFIER SEMICOLON     { GotoStatement($2) :> StatementBase }
    | CONTINUE SEMICOLON            { ContinueStatement() :> StatementBase }
    | BREAK SEMICOLON               { BreakStatement() :> StatementBase }
    | RETURN SEMICOLON              { ReturnStatement(null) :> StatementBase }
    | RETURN expression SEMICOLON   { ReturnStatement($2) :> StatementBase }
    
    
translation_unit
    : external_declaration                                                  { 
            let result = new TranslationUnit()
            result.Add($1)
            result
        }
    | translation_unit external_declaration                                 {
            $1.Add($2)
            $1
        }


external_declaration
    : function_definition                                                   { $1 }
    | declaration                                                           { $1 }


function_definition
    : declaration_Specifiers declarator declaration_list compound_Statement { FunctionDeclaration($1, $2, $3, $4) :> DeclarationBase }
    | declaration_Specifiers declarator compound_Statement                  { FunctionDeclaration($1, $2, null, $3) :> DeclarationBase }
    | declarator declaration_list compound_Statement                        { FunctionDeclaration(null, $1, $2, $3) :> DeclarationBase }
    | declarator compound_Statement                                         { FunctionDeclaration(null, $1, null, $2) :> DeclarationBase }